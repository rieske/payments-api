buildscript {
    ext {
        springCloudVersion = 'Finchley.M9'
        swaggerVersion = '2.6.1'
        pactVersion = '3.5.14'
        jerseyVersion = '2.26'
        asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.5.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.6'
}


mainClassName = 'lt.rieske.payments.PaymentsApiApp'

sourceCompatibility = 9

bootJar {
    archiveName = 'payments-api.jar'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    consumerContractTest {
        java.srcDir file('src/consumer-contract-test/java')
        resources.srcDir file('src/consumer-contract-test/resources')
    }
}

configurations {
    consumerContractTest
    apt
}

task consumerContractTest(type: Test) {
    // let's pretend those come from and are executed somewhere else by our consumer
    description = 'Consumer Driven Contract tests'
    testClassesDirs = sourceSets.consumerContractTest.output.classesDirs
    classpath = sourceSets.consumerContractTest.runtimeClasspath
    systemProperties['pact.rootDir'] = "$buildDir/pacts"
}

asciidoctor {
    dependsOn test
    sourceDir = asciiDocOutputDir
    outputDir = file('build/docs')
    backends = ['html5', 'pdf']
}

dependencies {
    apt 'org.projectlombok:lombok:1.16.20'

    compile 'org.projectlombok:lombok:1.16.20'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
    compile 'org.springframework.cloud:spring-cloud-starter-zipkin'

    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    compile 'io.micrometer:micrometer-registry-graphite:1.0.1'
    compile 'net.logstash.logback:logstash-logback-encoder:5.0'
    compile 'org.apache.commons:commons-lang3:3.6'

    testCompile 'javax.xml.bind:jaxb-api:2.3.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "au.com.dius:pact-jvm-provider-spring_2.12:${pactVersion}"
    testCompile "io.springfox:springfox-staticdocs:${swaggerVersion}"

    consumerContractTestCompile "au.com.dius:pact-jvm-consumer-junit_2.12:${pactVersion}"
    consumerContractTestCompile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
    consumerContractTestCompile "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
    consumerContractTestCompile "org.glassfish.jersey.connectors:jersey-apache-connector:${jerseyVersion}"
    consumerContractTestCompile 'com.fasterxml.jackson.core:jackson-core:2.9.5'
    consumerContractTestCompile 'org.assertj:assertj-core:3.9.0'
    consumerContractTestCompile 'org.slf4j:slf4j-log4j12:1.7.25'
    consumerContractTestCompile 'commons-io:commons-io:2.6'


}

test.dependsOn(consumerContractTest)

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
