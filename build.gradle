buildscript {
    ext {
        pactVersion = "4.0.8"
        cucumberVersion = "6.4.0"
        snippetsDir = file("${buildDir}/generated-snippets")
    }
}

plugins {
    id "java"
    id "org.springframework.boot" version "2.2.6.RELEASE"
    id "org.asciidoctor.convert" version "2.4.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

sourceSets {
    consumerContractTest {
        java.srcDir file("src/consumer-contract-test/java")
        resources.srcDir file("src/consumer-contract-test/resources")
    }
    componentTest {
        java.srcDir file("src/component-test/java")
        resources.srcDir file("src/component-test/resources")
    }
}

task consumerContractTest(type: Test)
task componentTest(type: Test)

tasks {
    wrapper {
        gradleVersion = "5.6.4"
    }

    bootJar {
        archiveFileName = "payments-api.jar"
    }

    asciidoctor {
        dependsOn(test)
        outputDir = file("build/docs")
        backends = ["html5"]
        sourceDir("src/main/asciidoc")
        attributes(\
        "snippets": snippetsDir,
                "toclevels": 5)
    }

    consumerContractTest {
        // let"s pretend those come from and are executed somewhere else by our consumer
        description = "Consumer Driven Contract tests"
        testClassesDirs = sourceSets.consumerContractTest.output.classesDirs
        classpath = sourceSets.consumerContractTest.runtimeClasspath
        systemProperties["pact.rootDir"] = "$buildDir/pacts"
    }

    componentTest {
        dependsOn(test)
        description = "Component tests"
        testClassesDirs = sourceSets.componentTest.output.classesDirs
        classpath = sourceSets.componentTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    test.dependsOn(consumerContractTest)
    check.dependsOn(componentTest)
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:1.18.12")
    compileOnly("org.projectlombok:lombok:1.18.12")

    implementation(platform("org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE"))

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.data:spring-data-rest-webmvc")
    implementation("org.springframework.data:spring-data-rest-hal-browser")

    implementation("io.micrometer:micrometer-registry-graphite")
    implementation("net.logstash.logback:logstash-logback-encoder:6.3")

    implementation("org.postgresql:postgresql:42.2.11")
    implementation("org.flywaydb:flyway-core")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("au.com.dius:pact-jvm-provider-spring:${pactVersion}")
    testImplementation("com.h2database:h2")

    testImplementation("io.cucumber:cucumber-java8:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-junit:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-spring:${cucumberVersion}")

    consumerContractTestImplementation("au.com.dius:pact-jvm-consumer-junit:${pactVersion}")
    consumerContractTestImplementation("io.rest-assured:rest-assured:4.3.0")
    consumerContractTestImplementation("org.slf4j:slf4j-log4j12:1.7.30")

    componentTestImplementation("org.testcontainers:testcontainers:1.13.0")
    componentTestImplementation("io.rest-assured:rest-assured:4.3.0")
    componentTestImplementation("org.slf4j:slf4j-log4j12:1.7.30")

    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE")
}
